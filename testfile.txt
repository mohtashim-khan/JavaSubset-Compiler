//
//  A recursive-descent calculator.  Not particularly robust!
//

calculator()
{
        init();
        parser();
}

//
//  Input wrappers, so we can push back a character.
//

boolean _havechar;
int _char;

int getc()
{
        if (_havechar) {
                _havechar = false;
                return _char;
        }
        return getchar();
}

void ungetc(int ch)
{
        if (_havechar) {
                prints("Internal error: too many ungets!\n");
                halt();
        }
        _havechar = true;
        _char = ch;

}

//
//  Scanner.
//

boolean _havetoken;
int _token;
int attr;

int peek()
{
        if (_havetoken)
                return _token;

        _havetoken = true;
        return _token = scanner();
}

void match(int expect)
{
        if (peek() != expect) {
                prints("Error: expected ");
                printc(expect);                 // XXX - not always printable
                prints("\n");
                halt();
        }
        _havetoken = false;
}

int scanner()
{
        int ch;

        while (isspace(ch = getc()))
                ;

        if (ch == EOF)                  return TK_EOF;
        if (ch == ASCII_NL)             return TK_EOLN;
        if (ch == ASCII_PLUS)           return TK_ADD;
        if (ch == ASCII_MINUS)          return TK_SUB;
        if (ch == ASCII_STAR)           return TK_MUL;
        if (ch == ASCII_SLASH)          return TK_DIV;
        if (ch == ASCII_LPAREN)         return TK_LPAREN;
        if (ch == ASCII_RPAREN)         return TK_RPAREN;

        if (isdigit(ch)) {
                attr = 0;
                while (isdigit(ch)) {
                        attr = attr * 10 + (ch - ASCII_0);
                        ch = getc();
                }
                ungetc(ch);
                return TK_NUMBER;
        }

        prints("Error: invalid character.\n");
        halt();
}
