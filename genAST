start {'type': 'start', 'lineno': 5} 
	mainFunctionDeclaration {'type': 'mainFunctionDeclaration', 'lineno': 5} 
		void {'type': 'void', 'lineno': 5} 
		calculator {'type': 'id', 'lineno': 5, 'attr': 'calculator'} 
		block {'type': 'block', 'lineno': 6} 
			functionInvocation {'type': 'functionInvocation', 'lineno': 7} 
				init {'type': 'id', 'lineno': 7, 'attr': 'init'} 
			functionInvocation {'type': 'functionInvocation', 'lineno': 8} 
				parser {'type': 'id', 'lineno': 8, 'attr': 'parser'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 15} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 15} 
			boolean {'type': 'boolean', 'lineno': 15} 
			_havechar {'type': 'id', 'lineno': 15, 'attr': '_havechar'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 16} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 16} 
			int {'type': 'int', 'lineno': 16} 
			_char {'type': 'id', 'lineno': 16, 'attr': '_char'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 18} 
		int {'type': 'int', 'lineno': 18} 
		getc {'type': 'id', 'lineno': 18, 'attr': 'getc'} 
		block {'type': 'block', 'lineno': 19} 
			ifStatement {'type': 'ifStatement', 'lineno': 20} 
				_havechar {'type': 'id', 'lineno': 20, 'attr': '_havechar'} 
				block {'type': 'block', 'lineno': 20} 
					= {'type': '=', 'lineno': 21} 
						_havechar {'type': 'id', 'lineno': 21, 'attr': '_havechar'} 
						false {'type': 'boolean', 'lineno': 21, 'attr': 'false'} 
					returnStatement {'type': 'returnStatement', 'lineno': 22} 
						_char {'type': 'id', 'lineno': 22, 'attr': '_char'} 
			returnStatement {'type': 'returnStatement', 'lineno': 24} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 24} 
					getchar {'type': 'id', 'lineno': 24, 'attr': 'getchar'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 27} 
		void {'type': 'void', 'lineno': 27} 
		ungetc {'type': 'id', 'lineno': 27, 'attr': 'ungetc'} 
		formalParameters {'type': 'formalParameters', 'lineno': 27} 
			formalParameter {'type': 'formalParameter', 'lineno': 27} 
				int {'type': 'int', 'lineno': 27} 
				ch {'type': 'id', 'lineno': 27, 'attr': 'ch'} 
		block {'type': 'block', 'lineno': 28} 
			ifStatement {'type': 'ifStatement', 'lineno': 29} 
				_havechar {'type': 'id', 'lineno': 29, 'attr': '_havechar'} 
				block {'type': 'block', 'lineno': 29} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 30} 
						prints {'type': 'id', 'lineno': 30, 'attr': 'prints'} 
						Internal error: too many ungets!\n {'type': 'string', 'lineno': 30, 'attr': 'Internal error: too many ungets!\n'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 31} 
						halt {'type': 'id', 'lineno': 31, 'attr': 'halt'} 
			= {'type': '=', 'lineno': 33} 
				_havechar {'type': 'id', 'lineno': 33, 'attr': '_havechar'} 
				true {'type': 'boolean', 'lineno': 33, 'attr': 'true'} 
			= {'type': '=', 'lineno': 34} 
				_char {'type': 'id', 'lineno': 34, 'attr': '_char'} 
				ch {'type': 'id', 'lineno': 34, 'attr': 'ch'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 41} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 41} 
			boolean {'type': 'boolean', 'lineno': 41} 
			_havetoken {'type': 'id', 'lineno': 41, 'attr': '_havetoken'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 42} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 42} 
			int {'type': 'int', 'lineno': 42} 
			_token {'type': 'id', 'lineno': 42, 'attr': '_token'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 43} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 43} 
			int {'type': 'int', 'lineno': 43} 
			attr {'type': 'id', 'lineno': 43, 'attr': 'attr'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 45} 
		int {'type': 'int', 'lineno': 45} 
		peek {'type': 'id', 'lineno': 45, 'attr': 'peek'} 
		block {'type': 'block', 'lineno': 46} 
			ifStatement {'type': 'ifStatement', 'lineno': 47} 
				_havetoken {'type': 'id', 'lineno': 47, 'attr': '_havetoken'} 
				returnStatement {'type': 'returnStatement', 'lineno': 48} 
					_token {'type': 'id', 'lineno': 48, 'attr': '_token'} 
			= {'type': '=', 'lineno': 50} 
				_havetoken {'type': 'id', 'lineno': 50, 'attr': '_havetoken'} 
				true {'type': 'boolean', 'lineno': 50, 'attr': 'true'} 
			returnStatement {'type': 'returnStatement', 'lineno': 51} 
				= {'type': '=', 'lineno': 51} 
					_token {'type': 'id', 'lineno': 51, 'attr': '_token'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 51} 
						scanner {'type': 'id', 'lineno': 51, 'attr': 'scanner'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 54} 
		void {'type': 'void', 'lineno': 54} 
		match {'type': 'id', 'lineno': 54, 'attr': 'match'} 
		formalParameters {'type': 'formalParameters', 'lineno': 54} 
			formalParameter {'type': 'formalParameter', 'lineno': 54} 
				int {'type': 'int', 'lineno': 54} 
				expect {'type': 'id', 'lineno': 54, 'attr': 'expect'} 
		block {'type': 'block', 'lineno': 55} 
			ifStatement {'type': 'ifStatement', 'lineno': 56} 
				!= {'type': '!=', 'lineno': 56} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 56} 
						peek {'type': 'id', 'lineno': 56, 'attr': 'peek'} 
					expect {'type': 'id', 'lineno': 56, 'attr': 'expect'} 
				block {'type': 'block', 'lineno': 56} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 57} 
						prints {'type': 'id', 'lineno': 57, 'attr': 'prints'} 
						Error: expected  {'type': 'string', 'lineno': 57, 'attr': 'Error: expected '} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 58} 
						printc {'type': 'id', 'lineno': 58, 'attr': 'printc'} 
						expect {'type': 'id', 'lineno': 58, 'attr': 'expect'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 59} 
						prints {'type': 'id', 'lineno': 59, 'attr': 'prints'} 
						\n {'type': 'string', 'lineno': 59, 'attr': '\n'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 60} 
						halt {'type': 'id', 'lineno': 60, 'attr': 'halt'} 
			= {'type': '=', 'lineno': 62} 
				_havetoken {'type': 'id', 'lineno': 62, 'attr': '_havetoken'} 
				false {'type': 'boolean', 'lineno': 62, 'attr': 'false'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 65} 
		int {'type': 'int', 'lineno': 65} 
		scanner {'type': 'id', 'lineno': 65, 'attr': 'scanner'} 
		block {'type': 'block', 'lineno': 66} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 67} 
				int {'type': 'int', 'lineno': 67} 
				ch {'type': 'id', 'lineno': 67, 'attr': 'ch'} 
			whileStatement {'type': 'whileStatement', 'lineno': 69} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 69} 
					isspace {'type': 'id', 'lineno': 69, 'attr': 'isspace'} 
					= {'type': '=', 'lineno': 69} 
						ch {'type': 'id', 'lineno': 69, 'attr': 'ch'} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 69} 
							getc {'type': 'id', 'lineno': 69, 'attr': 'getc'} 
				emptyStatement {'type': 'emptyStatement', 'lineno': 70} 
			ifStatement {'type': 'ifStatement', 'lineno': 72} 
				== {'type': '==', 'lineno': 72} 
					ch {'type': 'id', 'lineno': 72, 'attr': 'ch'} 
					EOF {'type': 'id', 'lineno': 72, 'attr': 'EOF'} 
				returnStatement {'type': 'returnStatement', 'lineno': 72} 
					TK_EOF {'type': 'id', 'lineno': 72, 'attr': 'TK_EOF'} 
			ifStatement {'type': 'ifStatement', 'lineno': 73} 
				== {'type': '==', 'lineno': 73} 
					ch {'type': 'id', 'lineno': 73, 'attr': 'ch'} 
					ASCII_NL {'type': 'id', 'lineno': 73, 'attr': 'ASCII_NL'} 
				returnStatement {'type': 'returnStatement', 'lineno': 73} 
					TK_EOLN {'type': 'id', 'lineno': 73, 'attr': 'TK_EOLN'} 
			ifStatement {'type': 'ifStatement', 'lineno': 74} 
				== {'type': '==', 'lineno': 74} 
					ch {'type': 'id', 'lineno': 74, 'attr': 'ch'} 
					ASCII_PLUS {'type': 'id', 'lineno': 74, 'attr': 'ASCII_PLUS'} 
				returnStatement {'type': 'returnStatement', 'lineno': 74} 
					TK_ADD {'type': 'id', 'lineno': 74, 'attr': 'TK_ADD'} 
			ifStatement {'type': 'ifStatement', 'lineno': 75} 
				== {'type': '==', 'lineno': 75} 
					ch {'type': 'id', 'lineno': 75, 'attr': 'ch'} 
					ASCII_MINUS {'type': 'id', 'lineno': 75, 'attr': 'ASCII_MINUS'} 
				returnStatement {'type': 'returnStatement', 'lineno': 75} 
					TK_SUB {'type': 'id', 'lineno': 75, 'attr': 'TK_SUB'} 
			ifStatement {'type': 'ifStatement', 'lineno': 76} 
				== {'type': '==', 'lineno': 76} 
					ch {'type': 'id', 'lineno': 76, 'attr': 'ch'} 
					ASCII_STAR {'type': 'id', 'lineno': 76, 'attr': 'ASCII_STAR'} 
				returnStatement {'type': 'returnStatement', 'lineno': 76} 
					TK_MUL {'type': 'id', 'lineno': 76, 'attr': 'TK_MUL'} 
			ifStatement {'type': 'ifStatement', 'lineno': 77} 
				== {'type': '==', 'lineno': 77} 
					ch {'type': 'id', 'lineno': 77, 'attr': 'ch'} 
					ASCII_SLASH {'type': 'id', 'lineno': 77, 'attr': 'ASCII_SLASH'} 
				returnStatement {'type': 'returnStatement', 'lineno': 77} 
					TK_DIV {'type': 'id', 'lineno': 77, 'attr': 'TK_DIV'} 
			ifStatement {'type': 'ifStatement', 'lineno': 78} 
				== {'type': '==', 'lineno': 78} 
					ch {'type': 'id', 'lineno': 78, 'attr': 'ch'} 
					ASCII_LPAREN {'type': 'id', 'lineno': 78, 'attr': 'ASCII_LPAREN'} 
				returnStatement {'type': 'returnStatement', 'lineno': 78} 
					TK_LPAREN {'type': 'id', 'lineno': 78, 'attr': 'TK_LPAREN'} 
			ifStatement {'type': 'ifStatement', 'lineno': 79} 
				== {'type': '==', 'lineno': 79} 
					ch {'type': 'id', 'lineno': 79, 'attr': 'ch'} 
					ASCII_RPAREN {'type': 'id', 'lineno': 79, 'attr': 'ASCII_RPAREN'} 
				returnStatement {'type': 'returnStatement', 'lineno': 79} 
					TK_RPAREN {'type': 'id', 'lineno': 79, 'attr': 'TK_RPAREN'} 
			ifStatement {'type': 'ifStatement', 'lineno': 81} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 81} 
					isdigit {'type': 'id', 'lineno': 81, 'attr': 'isdigit'} 
					ch {'type': 'id', 'lineno': 81, 'attr': 'ch'} 
				block {'type': 'block', 'lineno': 81} 
					= {'type': '=', 'lineno': 82} 
						attr {'type': 'id', 'lineno': 82, 'attr': 'attr'} 
						0 {'type': 'number', 'lineno': 82, 'attr': '0'} 
					whileStatement {'type': 'whileStatement', 'lineno': 83} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 83} 
							isdigit {'type': 'id', 'lineno': 83, 'attr': 'isdigit'} 
							ch {'type': 'id', 'lineno': 83, 'attr': 'ch'} 
						block {'type': 'block', 'lineno': 83} 
							= {'type': '=', 'lineno': 84} 
								attr {'type': 'id', 'lineno': 84, 'attr': 'attr'} 
								+ {'type': '+', 'lineno': 84} 
									* {'type': '*', 'lineno': 84} 
										attr {'type': 'id', 'lineno': 84, 'attr': 'attr'} 
										10 {'type': 'number', 'lineno': 84, 'attr': '10'} 
									- {'type': '-', 'lineno': 84} 
										ch {'type': 'id', 'lineno': 84, 'attr': 'ch'} 
										ASCII_0 {'type': 'id', 'lineno': 84, 'attr': 'ASCII_0'} 
							= {'type': '=', 'lineno': 85} 
								ch {'type': 'id', 'lineno': 85, 'attr': 'ch'} 
								functionInvocation {'type': 'functionInvocation', 'lineno': 85} 
									getc {'type': 'id', 'lineno': 85, 'attr': 'getc'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 87} 
						ungetc {'type': 'id', 'lineno': 87, 'attr': 'ungetc'} 
						ch {'type': 'id', 'lineno': 87, 'attr': 'ch'} 
					returnStatement {'type': 'returnStatement', 'lineno': 88} 
						TK_NUMBER {'type': 'id', 'lineno': 88, 'attr': 'TK_NUMBER'} 
			functionInvocation {'type': 'functionInvocation', 'lineno': 91} 
				prints {'type': 'id', 'lineno': 91, 'attr': 'prints'} 
				Error: invalid character.\n {'type': 'string', 'lineno': 91, 'attr': 'Error: invalid character.\n'} 
			functionInvocation {'type': 'functionInvocation', 'lineno': 92} 
				halt {'type': 'id', 'lineno': 92, 'attr': 'halt'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 95} 
		boolean {'type': 'boolean', 'lineno': 95} 
		isdigit {'type': 'id', 'lineno': 95, 'attr': 'isdigit'} 
		formalParameters {'type': 'formalParameters', 'lineno': 95} 
			formalParameter {'type': 'formalParameter', 'lineno': 95} 
				int {'type': 'int', 'lineno': 95} 
				ch {'type': 'id', 'lineno': 95, 'attr': 'ch'} 
		block {'type': 'block', 'lineno': 96} 
			returnStatement {'type': 'returnStatement', 'lineno': 97} 
				&& {'type': '&&', 'lineno': 97} 
					>= {'type': '>=', 'lineno': 97} 
						ch {'type': 'id', 'lineno': 97, 'attr': 'ch'} 
						ASCII_0 {'type': 'id', 'lineno': 97, 'attr': 'ASCII_0'} 
					<= {'type': '<=', 'lineno': 97} 
						ch {'type': 'id', 'lineno': 97, 'attr': 'ch'} 
						ASCII_9 {'type': 'id', 'lineno': 97, 'attr': 'ASCII_9'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 100} 
		boolean {'type': 'boolean', 'lineno': 100} 
		isspace {'type': 'id', 'lineno': 100, 'attr': 'isspace'} 
		formalParameters {'type': 'formalParameters', 'lineno': 100} 
			formalParameter {'type': 'formalParameter', 'lineno': 100} 
				int {'type': 'int', 'lineno': 100} 
				ch {'type': 'id', 'lineno': 100, 'attr': 'ch'} 
		block {'type': 'block', 'lineno': 101} 
			returnStatement {'type': 'returnStatement', 'lineno': 102} 
				|| {'type': '||', 'lineno': 102} 
					|| {'type': '||', 'lineno': 102} 
						== {'type': '==', 'lineno': 102} 
							ch {'type': 'id', 'lineno': 102, 'attr': 'ch'} 
							ASCII_SPACE {'type': 'id', 'lineno': 102, 'attr': 'ASCII_SPACE'} 
						== {'type': '==', 'lineno': 103} 
							ch {'type': 'id', 'lineno': 103, 'attr': 'ch'} 
							ASCII_TAB {'type': 'id', 'lineno': 103, 'attr': 'ASCII_TAB'} 
					== {'type': '==', 'lineno': 104} 
						ch {'type': 'id', 'lineno': 104, 'attr': 'ch'} 
						ASCII_CR {'type': 'id', 'lineno': 104, 'attr': 'ASCII_CR'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 111} 
		void {'type': 'void', 'lineno': 111} 
		parser {'type': 'id', 'lineno': 111, 'attr': 'parser'} 
		block {'type': 'block', 'lineno': 112} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 113} 
				int {'type': 'int', 'lineno': 113} 
				result {'type': 'id', 'lineno': 113, 'attr': 'result'} 
			whileStatement {'type': 'whileStatement', 'lineno': 115} 
				!= {'type': '!=', 'lineno': 115} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 115} 
						peek {'type': 'id', 'lineno': 115, 'attr': 'peek'} 
					TK_EOF {'type': 'id', 'lineno': 115, 'attr': 'TK_EOF'} 
				block {'type': 'block', 'lineno': 115} 
					= {'type': '=', 'lineno': 116} 
						result {'type': 'id', 'lineno': 116, 'attr': 'result'} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 116} 
							E {'type': 'id', 'lineno': 116, 'attr': 'E'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 117} 
						match {'type': 'id', 'lineno': 117, 'attr': 'match'} 
						TK_EOLN {'type': 'id', 'lineno': 117, 'attr': 'TK_EOLN'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 119} 
						prints {'type': 'id', 'lineno': 119, 'attr': 'prints'} 
						 =  {'type': 'string', 'lineno': 119, 'attr': ' = '} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 120} 
						printi {'type': 'id', 'lineno': 120, 'attr': 'printi'} 
						result {'type': 'id', 'lineno': 120, 'attr': 'result'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 121} 
						prints {'type': 'id', 'lineno': 121, 'attr': 'prints'} 
						\n {'type': 'string', 'lineno': 121, 'attr': '\n'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 125} 
		int {'type': 'int', 'lineno': 125} 
		E {'type': 'id', 'lineno': 125, 'attr': 'E'} 
		block {'type': 'block', 'lineno': 126} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 127} 
				int {'type': 'int', 'lineno': 127} 
				l {'type': 'id', 'lineno': 127, 'attr': 'l'} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 128} 
				int {'type': 'int', 'lineno': 128} 
				r {'type': 'id', 'lineno': 128, 'attr': 'r'} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 129} 
				int {'type': 'int', 'lineno': 129} 
				token {'type': 'id', 'lineno': 129, 'attr': 'token'} 
			= {'type': '=', 'lineno': 131} 
				l {'type': 'id', 'lineno': 131, 'attr': 'l'} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 131} 
					T {'type': 'id', 'lineno': 131, 'attr': 'T'} 
			whileStatement {'type': 'whileStatement', 'lineno': 132} 
				|| {'type': '||', 'lineno': 132} 
					== {'type': '==', 'lineno': 132} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 132} 
							peek {'type': 'id', 'lineno': 132, 'attr': 'peek'} 
						TK_ADD {'type': 'id', 'lineno': 132, 'attr': 'TK_ADD'} 
					== {'type': '==', 'lineno': 132} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 132} 
							peek {'type': 'id', 'lineno': 132, 'attr': 'peek'} 
						TK_SUB {'type': 'id', 'lineno': 132, 'attr': 'TK_SUB'} 
				block {'type': 'block', 'lineno': 132} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 133} 
						match {'type': 'id', 'lineno': 133, 'attr': 'match'} 
						= {'type': '=', 'lineno': 133} 
							token {'type': 'id', 'lineno': 133, 'attr': 'token'} 
							functionInvocation {'type': 'functionInvocation', 'lineno': 133} 
								peek {'type': 'id', 'lineno': 133, 'attr': 'peek'} 
					= {'type': '=', 'lineno': 134} 
						r {'type': 'id', 'lineno': 134, 'attr': 'r'} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 134} 
							T {'type': 'id', 'lineno': 134, 'attr': 'T'} 
					ifElseStatement {'type': 'ifElseStatement', 'lineno': 136} 
						== {'type': '==', 'lineno': 136} 
							token {'type': 'id', 'lineno': 136, 'attr': 'token'} 
							TK_ADD {'type': 'id', 'lineno': 136, 'attr': 'TK_ADD'} 
						= {'type': '=', 'lineno': 137} 
							l {'type': 'id', 'lineno': 137, 'attr': 'l'} 
							+ {'type': '+', 'lineno': 137} 
								l {'type': 'id', 'lineno': 137, 'attr': 'l'} 
								r {'type': 'id', 'lineno': 137, 'attr': 'r'} 
						= {'type': '=', 'lineno': 139} 
							l {'type': 'id', 'lineno': 139, 'attr': 'l'} 
							- {'type': '-', 'lineno': 139} 
								l {'type': 'id', 'lineno': 139, 'attr': 'l'} 
								r {'type': 'id', 'lineno': 139, 'attr': 'r'} 
			returnStatement {'type': 'returnStatement', 'lineno': 141} 
				l {'type': 'id', 'lineno': 141, 'attr': 'l'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 144} 
		int {'type': 'int', 'lineno': 144} 
		T {'type': 'id', 'lineno': 144, 'attr': 'T'} 
		block {'type': 'block', 'lineno': 145} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 146} 
				int {'type': 'int', 'lineno': 146} 
				l {'type': 'id', 'lineno': 146, 'attr': 'l'} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 147} 
				int {'type': 'int', 'lineno': 147} 
				r {'type': 'id', 'lineno': 147, 'attr': 'r'} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 148} 
				int {'type': 'int', 'lineno': 148} 
				token {'type': 'id', 'lineno': 148, 'attr': 'token'} 
			= {'type': '=', 'lineno': 150} 
				l {'type': 'id', 'lineno': 150, 'attr': 'l'} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 150} 
					F {'type': 'id', 'lineno': 150, 'attr': 'F'} 
			whileStatement {'type': 'whileStatement', 'lineno': 151} 
				|| {'type': '||', 'lineno': 151} 
					== {'type': '==', 'lineno': 151} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 151} 
							peek {'type': 'id', 'lineno': 151, 'attr': 'peek'} 
						TK_MUL {'type': 'id', 'lineno': 151, 'attr': 'TK_MUL'} 
					== {'type': '==', 'lineno': 151} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 151} 
							peek {'type': 'id', 'lineno': 151, 'attr': 'peek'} 
						TK_DIV {'type': 'id', 'lineno': 151, 'attr': 'TK_DIV'} 
				block {'type': 'block', 'lineno': 151} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 152} 
						match {'type': 'id', 'lineno': 152, 'attr': 'match'} 
						= {'type': '=', 'lineno': 152} 
							token {'type': 'id', 'lineno': 152, 'attr': 'token'} 
							functionInvocation {'type': 'functionInvocation', 'lineno': 152} 
								peek {'type': 'id', 'lineno': 152, 'attr': 'peek'} 
					= {'type': '=', 'lineno': 153} 
						r {'type': 'id', 'lineno': 153, 'attr': 'r'} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 153} 
							F {'type': 'id', 'lineno': 153, 'attr': 'F'} 
					ifElseStatement {'type': 'ifElseStatement', 'lineno': 155} 
						== {'type': '==', 'lineno': 155} 
							token {'type': 'id', 'lineno': 155, 'attr': 'token'} 
							TK_MUL {'type': 'id', 'lineno': 155, 'attr': 'TK_MUL'} 
						= {'type': '=', 'lineno': 156} 
							l {'type': 'id', 'lineno': 156, 'attr': 'l'} 
							* {'type': '*', 'lineno': 156} 
								l {'type': 'id', 'lineno': 156, 'attr': 'l'} 
								r {'type': 'id', 'lineno': 156, 'attr': 'r'} 
						= {'type': '=', 'lineno': 158} 
							l {'type': 'id', 'lineno': 158, 'attr': 'l'} 
							/ {'type': '/', 'lineno': 158} 
								l {'type': 'id', 'lineno': 158, 'attr': 'l'} 
								r {'type': 'id', 'lineno': 158, 'attr': 'r'} 
			returnStatement {'type': 'returnStatement', 'lineno': 160} 
				l {'type': 'id', 'lineno': 160, 'attr': 'l'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 163} 
		int {'type': 'int', 'lineno': 163} 
		F {'type': 'id', 'lineno': 163, 'attr': 'F'} 
		block {'type': 'block', 'lineno': 164} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 165} 
				int {'type': 'int', 'lineno': 165} 
				result {'type': 'id', 'lineno': 165, 'attr': 'result'} 
			variableDeclaration {'type': 'variableDeclaration', 'lineno': 167} 
				int {'type': 'int', 'lineno': 167} 
				token {'type': 'id', 'lineno': 167, 'attr': 'token'} 
			= {'type': '=', 'lineno': 168} 
				token {'type': 'id', 'lineno': 168, 'attr': 'token'} 
				functionInvocation {'type': 'functionInvocation', 'lineno': 168} 
					peek {'type': 'id', 'lineno': 168, 'attr': 'peek'} 
			ifElseStatement {'type': 'ifElseStatement', 'lineno': 170} 
				== {'type': '==', 'lineno': 170} 
					token {'type': 'id', 'lineno': 170, 'attr': 'token'} 
					TK_LPAREN {'type': 'id', 'lineno': 170, 'attr': 'TK_LPAREN'} 
				block {'type': 'block', 'lineno': 170} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 171} 
						match {'type': 'id', 'lineno': 171, 'attr': 'match'} 
						TK_LPAREN {'type': 'id', 'lineno': 171, 'attr': 'TK_LPAREN'} 
					= {'type': '=', 'lineno': 172} 
						result {'type': 'id', 'lineno': 172, 'attr': 'result'} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 172} 
							E {'type': 'id', 'lineno': 172, 'attr': 'E'} 
					functionInvocation {'type': 'functionInvocation', 'lineno': 173} 
						match {'type': 'id', 'lineno': 173, 'attr': 'match'} 
						TK_RPAREN {'type': 'id', 'lineno': 173, 'attr': 'TK_RPAREN'} 
				ifElseStatement {'type': 'ifElseStatement', 'lineno': 175} 
					== {'type': '==', 'lineno': 175} 
						token {'type': 'id', 'lineno': 175, 'attr': 'token'} 
						TK_SUB {'type': 'id', 'lineno': 175, 'attr': 'TK_SUB'} 
					block {'type': 'block', 'lineno': 175} 
						functionInvocation {'type': 'functionInvocation', 'lineno': 176} 
							match {'type': 'id', 'lineno': 176, 'attr': 'match'} 
							TK_SUB {'type': 'id', 'lineno': 176, 'attr': 'TK_SUB'} 
						= {'type': '=', 'lineno': 177} 
							result {'type': 'id', 'lineno': 177, 'attr': 'result'} 
							- {'type': 'unaryExpression', 'lineno': 177, 'attr': '-'} 
								functionInvocation {'type': 'functionInvocation', 'lineno': 177} 
									F {'type': 'id', 'lineno': 177, 'attr': 'F'} 
					ifElseStatement {'type': 'ifElseStatement', 'lineno': 179} 
						== {'type': '==', 'lineno': 179} 
							token {'type': 'id', 'lineno': 179, 'attr': 'token'} 
							TK_NUMBER {'type': 'id', 'lineno': 179, 'attr': 'TK_NUMBER'} 
						block {'type': 'block', 'lineno': 179} 
							functionInvocation {'type': 'functionInvocation', 'lineno': 180} 
								match {'type': 'id', 'lineno': 180, 'attr': 'match'} 
								TK_NUMBER {'type': 'id', 'lineno': 180, 'attr': 'TK_NUMBER'} 
							= {'type': '=', 'lineno': 181} 
								result {'type': 'id', 'lineno': 181, 'attr': 'result'} 
								attr {'type': 'id', 'lineno': 181, 'attr': 'attr'} 
						block {'type': 'block', 'lineno': 183} 
							functionInvocation {'type': 'functionInvocation', 'lineno': 184} 
								prints {'type': 'id', 'lineno': 184, 'attr': 'prints'} 
								Error: expected factor.\n {'type': 'string', 'lineno': 184, 'attr': 'Error: expected factor.\n'} 
							functionInvocation {'type': 'functionInvocation', 'lineno': 185} 
								halt {'type': 'id', 'lineno': 185, 'attr': 'halt'} 
			returnStatement {'type': 'returnStatement', 'lineno': 187} 
				result {'type': 'id', 'lineno': 187, 'attr': 'result'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 194} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 194} 
			int {'type': 'int', 'lineno': 194} 
			EOF {'type': 'id', 'lineno': 194, 'attr': 'EOF'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 196} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 196} 
			int {'type': 'int', 'lineno': 196} 
			TK_EOF {'type': 'id', 'lineno': 196, 'attr': 'TK_EOF'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 197} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 197} 
			int {'type': 'int', 'lineno': 197} 
			TK_EOLN {'type': 'id', 'lineno': 197, 'attr': 'TK_EOLN'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 198} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 198} 
			int {'type': 'int', 'lineno': 198} 
			TK_NUMBER {'type': 'id', 'lineno': 198, 'attr': 'TK_NUMBER'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 199} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 199} 
			int {'type': 'int', 'lineno': 199} 
			TK_ADD {'type': 'id', 'lineno': 199, 'attr': 'TK_ADD'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 200} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 200} 
			int {'type': 'int', 'lineno': 200} 
			TK_SUB {'type': 'id', 'lineno': 200, 'attr': 'TK_SUB'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 201} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 201} 
			int {'type': 'int', 'lineno': 201} 
			TK_MUL {'type': 'id', 'lineno': 201, 'attr': 'TK_MUL'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 202} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 202} 
			int {'type': 'int', 'lineno': 202} 
			TK_DIV {'type': 'id', 'lineno': 202, 'attr': 'TK_DIV'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 203} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 203} 
			int {'type': 'int', 'lineno': 203} 
			TK_LPAREN {'type': 'id', 'lineno': 203, 'attr': 'TK_LPAREN'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 204} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 204} 
			int {'type': 'int', 'lineno': 204} 
			TK_RPAREN {'type': 'id', 'lineno': 204, 'attr': 'TK_RPAREN'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 206} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 206} 
			int {'type': 'int', 'lineno': 206} 
			ASCII_0 {'type': 'id', 'lineno': 206, 'attr': 'ASCII_0'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 207} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 207} 
			int {'type': 'int', 'lineno': 207} 
			ASCII_9 {'type': 'id', 'lineno': 207, 'attr': 'ASCII_9'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 208} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 208} 
			int {'type': 'int', 'lineno': 208} 
			ASCII_PLUS {'type': 'id', 'lineno': 208, 'attr': 'ASCII_PLUS'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 209} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 209} 
			int {'type': 'int', 'lineno': 209} 
			ASCII_MINUS {'type': 'id', 'lineno': 209, 'attr': 'ASCII_MINUS'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 210} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 210} 
			int {'type': 'int', 'lineno': 210} 
			ASCII_STAR {'type': 'id', 'lineno': 210, 'attr': 'ASCII_STAR'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 211} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 211} 
			int {'type': 'int', 'lineno': 211} 
			ASCII_SLASH {'type': 'id', 'lineno': 211, 'attr': 'ASCII_SLASH'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 212} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 212} 
			int {'type': 'int', 'lineno': 212} 
			ASCII_LPAREN {'type': 'id', 'lineno': 212, 'attr': 'ASCII_LPAREN'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 213} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 213} 
			int {'type': 'int', 'lineno': 213} 
			ASCII_RPAREN {'type': 'id', 'lineno': 213, 'attr': 'ASCII_RPAREN'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 214} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 214} 
			int {'type': 'int', 'lineno': 214} 
			ASCII_SPACE {'type': 'id', 'lineno': 214, 'attr': 'ASCII_SPACE'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 215} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 215} 
			int {'type': 'int', 'lineno': 215} 
			ASCII_TAB {'type': 'id', 'lineno': 215, 'attr': 'ASCII_TAB'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 216} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 216} 
			int {'type': 'int', 'lineno': 216} 
			ASCII_CR {'type': 'id', 'lineno': 216, 'attr': 'ASCII_CR'} 
	globalVardeclaration {'type': 'globalVardeclaration', 'lineno': 217} 
		variableDeclaration {'type': 'variableDeclaration', 'lineno': 217} 
			int {'type': 'int', 'lineno': 217} 
			ASCII_NL {'type': 'id', 'lineno': 217, 'attr': 'ASCII_NL'} 
	functionDeclaration {'type': 'functionDeclaration', 'lineno': 219} 
		void {'type': 'void', 'lineno': 219} 
		init {'type': 'id', 'lineno': 219, 'attr': 'init'} 
		block {'type': 'block', 'lineno': 220} 
			= {'type': '=', 'lineno': 221} 
				EOF {'type': 'id', 'lineno': 221, 'attr': 'EOF'} 
				- {'type': 'unaryExpression', 'lineno': 221, 'attr': '-'} 
					1 {'type': 'number', 'lineno': 221, 'attr': '1'} 
			= {'type': '=', 'lineno': 223} 
				ASCII_0 {'type': 'id', 'lineno': 223, 'attr': 'ASCII_0'} 
				48 {'type': 'number', 'lineno': 223, 'attr': '48'} 
			= {'type': '=', 'lineno': 224} 
				ASCII_9 {'type': 'id', 'lineno': 224, 'attr': 'ASCII_9'} 
				57 {'type': 'number', 'lineno': 224, 'attr': '57'} 
			= {'type': '=', 'lineno': 225} 
				ASCII_PLUS {'type': 'id', 'lineno': 225, 'attr': 'ASCII_PLUS'} 
				43 {'type': 'number', 'lineno': 225, 'attr': '43'} 
			= {'type': '=', 'lineno': 226} 
				ASCII_MINUS {'type': 'id', 'lineno': 226, 'attr': 'ASCII_MINUS'} 
				45 {'type': 'number', 'lineno': 226, 'attr': '45'} 
			= {'type': '=', 'lineno': 227} 
				ASCII_STAR {'type': 'id', 'lineno': 227, 'attr': 'ASCII_STAR'} 
				42 {'type': 'number', 'lineno': 227, 'attr': '42'} 
			= {'type': '=', 'lineno': 228} 
				ASCII_SLASH {'type': 'id', 'lineno': 228, 'attr': 'ASCII_SLASH'} 
				47 {'type': 'number', 'lineno': 228, 'attr': '47'} 
			= {'type': '=', 'lineno': 229} 
				ASCII_LPAREN {'type': 'id', 'lineno': 229, 'attr': 'ASCII_LPAREN'} 
				40 {'type': 'number', 'lineno': 229, 'attr': '40'} 
			= {'type': '=', 'lineno': 230} 
				ASCII_RPAREN {'type': 'id', 'lineno': 230, 'attr': 'ASCII_RPAREN'} 
				41 {'type': 'number', 'lineno': 230, 'attr': '41'} 
			= {'type': '=', 'lineno': 231} 
				ASCII_SPACE {'type': 'id', 'lineno': 231, 'attr': 'ASCII_SPACE'} 
				32 {'type': 'number', 'lineno': 231, 'attr': '32'} 
			= {'type': '=', 'lineno': 232} 
				ASCII_TAB {'type': 'id', 'lineno': 232, 'attr': 'ASCII_TAB'} 
				9 {'type': 'number', 'lineno': 232, 'attr': '9'} 
			= {'type': '=', 'lineno': 233} 
				ASCII_CR {'type': 'id', 'lineno': 233, 'attr': 'ASCII_CR'} 
				13 {'type': 'number', 'lineno': 233, 'attr': '13'} 
			= {'type': '=', 'lineno': 234} 
				ASCII_NL {'type': 'id', 'lineno': 234, 'attr': 'ASCII_NL'} 
				10 {'type': 'number', 'lineno': 234, 'attr': '10'} 
			= {'type': '=', 'lineno': 236} 
				TK_EOF {'type': 'id', 'lineno': 236, 'attr': 'TK_EOF'} 
				256 {'type': 'number', 'lineno': 236, 'attr': '256'} 
			= {'type': '=', 'lineno': 237} 
				TK_NUMBER {'type': 'id', 'lineno': 237, 'attr': 'TK_NUMBER'} 
				257 {'type': 'number', 'lineno': 237, 'attr': '257'} 
			= {'type': '=', 'lineno': 238} 
				TK_ADD {'type': 'id', 'lineno': 238, 'attr': 'TK_ADD'} 
				ASCII_PLUS {'type': 'id', 'lineno': 238, 'attr': 'ASCII_PLUS'} 
			= {'type': '=', 'lineno': 239} 
				TK_SUB {'type': 'id', 'lineno': 239, 'attr': 'TK_SUB'} 
				ASCII_MINUS {'type': 'id', 'lineno': 239, 'attr': 'ASCII_MINUS'} 
			= {'type': '=', 'lineno': 240} 
				TK_MUL {'type': 'id', 'lineno': 240, 'attr': 'TK_MUL'} 
				ASCII_STAR {'type': 'id', 'lineno': 240, 'attr': 'ASCII_STAR'} 
			= {'type': '=', 'lineno': 241} 
				TK_DIV {'type': 'id', 'lineno': 241, 'attr': 'TK_DIV'} 
				ASCII_SLASH {'type': 'id', 'lineno': 241, 'attr': 'ASCII_SLASH'} 
			= {'type': '=', 'lineno': 242} 
				TK_LPAREN {'type': 'id', 'lineno': 242, 'attr': 'TK_LPAREN'} 
				ASCII_LPAREN {'type': 'id', 'lineno': 242, 'attr': 'ASCII_LPAREN'} 
			= {'type': '=', 'lineno': 243} 
				TK_RPAREN {'type': 'id', 'lineno': 243, 'attr': 'TK_RPAREN'} 
				ASCII_RPAREN {'type': 'id', 'lineno': 243, 'attr': 'ASCII_RPAREN'} 
			= {'type': '=', 'lineno': 244} 
				TK_EOLN {'type': 'id', 'lineno': 244, 'attr': 'TK_EOLN'} 
				ASCII_NL {'type': 'id', 'lineno': 244, 'attr': 'ASCII_NL'} 
